
#  settings_gen_cpp
#  --------------------------
#
#   Add custom commands to process ``.fbs`` files to C++ using flatc compiler
#
#     settings_gen_cpp (<flatbuffer_bin_path> <file_path_to_generate> <target to build> <*.proto files> )
#
#   ``ARGN``
#     ``.fbs`` files
#
macro(settings_gen_cpp flatbuffer_bin_path gen_out_path _target)
#    if(NOT TARGET ${_target})
#        message(SEND_ERROR "settings_gen_cpp requires target as third argument")
#        return()
#    endif()
    if(NOT ${ARGC} GREATER 1)
        message(SEND_ERROR "Error: settings_gen_cpp() called without any files as arguments")
        return()
    endif()
    if(NOT _generated_headers)
        set(_generated_headers)
    endif()

    foreach(FIL ${ARGN})
        get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
        message(STATUS "settings_gen_cpp: processing ${ABS_FIL}")
        get_filename_component(FIL_WE ${FIL} NAME_WE)
        get_filename_component(NAM ${FIL} NAME)
        
        file(RELATIVE_PATH REL_FIL ${CMAKE_CURRENT_SOURCE_DIR}/proto ${ABS_FIL})
        get_filename_component(REL_DIR ${REL_FIL} DIRECTORY)
        get_filename_component(ABS_DIR ${ABS_FIL} DIRECTORY)

        if (REL_DIR)
            set(RELFIL_WE "${REL_DIR}/${FIL_WE}")
        else()
            set(RELFIL_WE ${FIL_WE})
        endif ()

        #message(STATUS "settings_gen_cpp: FIL_WE = ${FIL_WE}")
        #message(STATUS "settings_gen_cpp: REL_FIL = ${REL_FIL}")
        #message(STATUS "settings_gen_cpp: REL_DIR = ${REL_DIR}")
        #message(STATUS "settings_gen_cpp: ABS_DIR = ${ABS_DIR}")
        #message(STATUS "settings_gen_cpp: RELFIL_WE = ${RELFIL_WE}")
        #message(STATUS "settings_gen_cpp: gen_out_path = ${gen_out_path}")
        #message(STATUS "settings_gen_cpp: CMAKE_CURRENT_BUILD_DIR = ${CMAKE_CURRENT_BINARY_DIR}")

        set(_BIN_DUMP_SOURCE
            ${gen_out_path}/${FIL_WE}_bindump.cpp)
        set(_GEN_HEADERS
            ${gen_out_path}/${FIL_WE}_generated.h
        )
        list(APPEND _generated_headers "${_GEN_HEADERS}") 
        target_sources(${_target} PRIVATE ${_BIN_DUMP_SOURCE} ${_GEN_HEADERS})
        set_source_files_properties(${_BIN_DUMP_SOURCE} ${_GEN_HEADERS} PROPERTIES GENERATED TRUE)

        add_custom_command(
                OUTPUT ${_GEN_HEADERS}
                COMMAND ${flatbuffer_bin_path}
                ARGS -c -s -o ${gen_out_path}
                --no-prefix
                --scoped-enums
                --gen-mutable
                --gen-object-api
                --gen-name-strings
                --grpc
                --bfbs-comments
                --reflect-types
                --reflect-names
                --cpp-ptr-type sisl::embedded_t
                ${FIL}
                DEPENDS ${FIL}
                WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                COMMENT "Running flatc compiler on ${CMAKE_CURRENT_SOURCE_DIR} ${FIL} to generate ${_GEN_HEADERS}"
                VERBATIM
        )

        add_custom_command(
                OUTPUT ${_BIN_DUMP_SOURCE}
                WORKING_DIRECTORY ${ABS_DIR}
                COMMAND mkdir -p ${gen_out_path} && xxd -i ${NAM} ${_BIN_DUMP_SOURCE}
                DEPENDS ${ABS_FIL}
                COMMENT "invoking xxd to generate object file for schema ${ABS_FIL} to ${_BIN_DUMP_SOURCE}"
                VERBATIM
        )

        #message(STATUS "settings_gen_cpp: _BIN_DUMP_HEADER = ${_BIN_DUMP_HEADER}")
        #message(STATUS "settings_gen_cpp: _GEN_HEADERS = ${_GEN_HEADERS}")

        #since some of the headers generated by this command are also included in hand-written sources make this command run before the _target
        get_property(_sources TARGET ${_target} PROPERTY SOURCES)
        #message(STATUS "settings_gen_cpp: target ${_target}: _sources property = ${_sources} depends on ${_GEN_HEADERS} ${_BIN_DUMP_HEADER}")
        set_source_files_properties(${_sources} PROPERTIES OBJECT_DEPENDS ${_GEN_HEADERS})
        set_source_files_properties(${_sources} PROPERTIES OBJECT_DEPENDS ${_BIN_DUMP_SOURCE})

    endforeach()
endmacro()
