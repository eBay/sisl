pipeline {
    agent { label 'sds-builder-2204' }

    environment {
        ARTIFACTORY_PASS = credentials('ARTIFACTORY_PASS')
        CONAN_USER = 'oss'
        TESTING_BRANCH = 'master'
        STABLE_BRANCH = 'stable/v*'
    }

    stages {
        stage('Check Branch') {
            when { not { anyOf {
                branch "${TESTING_BRANCH}"
                branch "${STABLE_BRANCH}"
            } } }
            steps {
                script {
                    error("Jenkins CI for known branches only!")
                }
            }
        }

        stage('Get Version') {
            steps {
                script {
                    PROJECT = sh(script: "grep -m 1 'name =' conanfile.py | awk '{print \$3}' | tr -d '\n' | tr -d '\"'", returnStdout: true)
                    VER = sh(script: "grep -m 1 ' version =' conanfile.py | awk '{print \$3}' | tr -d '\n' | tr -d '\"'", returnStdout: true)
                    CONAN_CHANNEL = sh(script: "echo ${BRANCH_NAME} | sed -E 's,(\\w+-?\\d*)/.*,\\1,' | sed -E 's,-,_,' | tr -d '\n'", returnStdout: true)
                    TAG = "${VER}@${CONAN_USER}/${CONAN_CHANNEL}"
                    slackSend color: '#0063D1', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* is building."
                }
            }
        }

        stage('Tag Stable Build') {
            when { branch "${STABLE_BRANCH}" }
            steps {
                script {
                    TAG = "${VER}@"
                }
            }
        }

        stage('Build') {
            failFast true
            matrix {
                agent { label 'sds-builder-2204' }
                axes {
                    axis {
                        name 'BUILD_TYPE'
                        values 'release', 'debug', 'test'
                    }
                    axis {
                        name 'ALLOC'
                        values 'libc', 'tcmalloc'
                    }
                }
                excludes { 
                    exclude {
                        axis {
                            name 'BUILD_TYPE'
                            values 'test'
                        }
                        axis {
                            name 'ALLOC'
                            values 'libc'
                        }
                    }
                }

                stages {
                    stage("Build") {
                        steps {
                            script {
                                def PRERELEASE = 'True'
                                def BUILD_PROFILE = "${BUILD_TYPE}"
                                if ("${ALLOC}" == 'libc') {
                                    PRERELEASE = 'False'
                                } else {
                                    if ("${BUILD_TYPE}" == "release") {
                                        PRERELEASE = 'False'
                                        BUILD_PROFILE = "test"
                                    }
                                }
                                sh "conan create \
                                        --build missing \
                                        -o ${PROJECT}:malloc_impl=${ALLOC} \
                                        -o ${PROJECT}:prerelease=${PRERELEASE} \
                                        -pr ${BUILD_PROFILE} \
                                        . \
                                        ${PROJECT}/${TAG}"
                            }
                        }
                    }

                    stage("Deploy") {
                        steps {
                            sh "conan user -r ebay-local -p ${ARTIFACTORY_PASS} _service_sds"
                            sh "conan upload ${PROJECT}/${TAG} -c --all -r ebay-local"
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            slackSend color: '#E43237', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* has had a failure : ${BUILD_URL}"
        }
        success {
            slackSend color: '#85B717', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* has completed."
        }
    }
}
