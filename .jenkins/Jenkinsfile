pipeline {
    agent any

    environment {
        ARTIFACTORY_PASS = credentials('ARTIFACTORY_PASS')
        CONAN_USER = 'oss'
        TARGET_BRANCH = 'master'
        TESTING_BRANCH = 'testing/v*'
        STABLE_BRANCH = 'stable/v*'
    }

    stages {
        stage('Adjust Tag for Master/PR') {
            when { not { anyOf {
                branch "${TESTING_BRANCH}"
                branch "${STABLE_BRANCH}"
            } } }
            steps {
                script {
                    sh(script: "sed -Ei 's, version = .*\"([[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+).*, version = \"\\1-${env.BUILD_NUMBER}\",' conanfile.py")
                    BUILD_MISSING = "--build missing"
                }
            }
        }
        stage('Adjust for Testing/Stable') {
            when { anyOf {
                branch "${TESTING_BRANCH}"
                branch "${STABLE_BRANCH}"
            } }
            steps {
                script {
                    BUILD_MISSING = ""
                }
            }
        }

        stage('Get Version') {
            steps {
                script {
                    PROJECT = sh(script: "grep -m 1 'name =' conanfile.py | awk '{print \$3}' | tr -d '\n' | tr -d '\"'", returnStdout: true)
                    VER = sh(script: "grep -m 1 ' version =' conanfile.py | awk '{print \$3}' | tr -d '\n' | tr -d '\"'", returnStdout: true)
                    CONAN_CHANNEL = sh(script: "echo ${BRANCH_NAME} | sed -E 's,(\\w+-?\\d*)/.*,\\1,' | sed -E 's,-,_,' | tr -d '\n'", returnStdout: true)
                    TAG = "${VER}@${CONAN_USER}/${CONAN_CHANNEL}"
                    slackSend color: '#0063D1', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* is building."
                }
            }
        }

        stage('Tag Stable Build') {
            when { branch "${STABLE_BRANCH}" }
            steps {
                script {
                    TAG = "${VER}@"
                }
            }
        }

        stage('Build') {
            failFast true
            matrix {
                agent { label 'sds-builder' }
                axes {
                    axis {
                        name 'BUILD_TYPE'
                        values 'sanitize', 'release', 'debug', 'test'
                    }
                    axis {
                        name 'COVERAGE'
                        values 'False'
                    }
                }
                excludes { 
                    exclude {
                        axis {
                            name 'BUILD_TYPE'
                            values 'sanitize', 'test', 'release'
                        }
                        axis {
                            name 'COVERAGE'
                            values 'True'
                        }
                    }
                }

                stages {
                    stage('Adjust Tag for Master/PR') {
                        when { not { anyOf {
                            branch "${TESTING_BRANCH}"
                            branch "${STABLE_BRANCH}"
                        } } }
                        steps {
                            sh(script: "sed -Ei 's, version = .*\"([[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+).*, version = \"\\1-${env.BUILD_NUMBER}\",' conanfile.py")
                        }
                    }

                    stage("PR Build") {
                        when { allOf {
                            expression { "${COVERAGE}" == 'False' }
                            expression { "${BUILD_TYPE}" != 'sanitize' }
                            expression { "${BUILD_TYPE}" != 'debug' }
                            expression { { branch "PR_*" } }
                        } }
                        steps {
                            def PRERELEASE_OPT = 'True'
                            if ("${BUILD_TYPE}" == 'release') {
                                PRERELEASE_OPT = 'False'
                            }
                            sh "conan create ${BUILD_MISSING} -o prerelease=${PRERELEASE_OPT} -o malloc_impl=tcmalloc -pr ${BUILD_TYPE} . ${PROJECT}/${TAG}"
                        }
                    }

                    stage("Branch Build") {
                        when { allOf {
                            expression { "${COVERAGE}" == 'False' }
                            expression { "${BUILD_TYPE}" != 'sanitize' }
                            expression { not { branch "PR_*" } }
                        } }
                        steps {
                            def PRERELEASE_OPT = 'True'
                            if ("${BUILD_TYPE}" == 'release') {
                                PRERELEASE_OPT = 'False'
                            }
                            sh "conan create ${BUILD_MISSING} -o prerelease=${PRERELEASE_OPT} -o malloc_impl=tcmalloc -pr ${BUILD_TYPE} . ${PROJECT}/${TAG}"
                        }
                    }

                    stage("Sanitize") {
                        when { allOf {
                            expression { "${BUILD_TYPE}" == 'sanitize' }
                        } }
                        steps {
                            sh "conan create ${BUILD_MISSING} -o malloc_impl=libc -o sanitize=True -pr debug . ${PROJECT}/${TAG}"
                        }
                    }

                    stage('Coverage') {
                        when { not { anyOf {
                            branch "${STABLE_BRANCH}"
                            expression { "${COVERAGE}" == 'False' }
                            expression { not { branch "PR_*" } }
                        } } }

                        stages {
                            stage("Adjust Sonar Branch") {
                                when {
                                    not {
                                        branch "${TARGET_BRANCH}"
                                    }
                                }
                                steps {
                                    sh "echo \"sonar.branch.target=${TARGET_BRANCH}\" >> sonar-project.properties"
                                }
                            }
                            stage("Code Coverage") {
                                steps {
                                    slackSend channel: '#sds-ci', message: "*${PROJECT}:${TAG}* is undergoing Code Coverage."
                                    sh "echo \"sonar.branch.name=${BRANCH_NAME}\" >> sonar-project.properties"
                                    sh "conan install -pr ${BUILD_TYPE} ${BUILD_MISSING} -o ${PROJECT}:coverage=True ."
                                    sh "build-wrapper-linux-x86-64 --out-dir /tmp/sonar conan build ."
                                    sh "find . -name \"*.gcno\" -exec gcov {} \\;"
                                    withSonarQubeEnv('sds-sonar')  {
                                        sh "sonar-scanner -Dsonar.projectBaseDir=. -Dsonar.projectVersion=\"${VER}\""
                                    }
                                }
                            }
                            stage("Quality Gate") {
                                steps {
                                    timeout(time: 30, unit: 'MINUTES') {
                                        waitForQualityGate abortPipeline: true
                                    }
                                }
                            }
                        }
                    }

                    stage("Deploy") {
                        when { allOf {
                            expression { "${COVERAGE}" == 'False' }
                            expression { "${BUILD_TYPE}" != 'sanitize' }
                            expression { not { branch "PR_*" } }
                        } }
                        steps {
                            sh "conan user -r ebay-local -p ${ARTIFACTORY_PASS} _service_sds"
                            sh "conan upload ${PROJECT}/${TAG} -c --all -r ebay-local"
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            slackSend color: '#E43237', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* has had a failure : ${BUILD_URL}"
        }
        success {
            slackSend color: '#85B717', channel: '#sds-ci', message: "*${PROJECT}/${TAG}* has completed."
        }
    }
}
