syntax = "proto3";

package flip;

option cc_enable_arenas = true;
enum Operator {
    // Equal.
    EQUAL = 0;

    // Inequality.
    NOT_EQUAL = 1;

    // Less than.
    LESS_THAN = 2;

    // Less than or equal.
    LESS_THAN_OR_EQUAL = 3;

    // Greater than.
    GREATER_THAN = 4;

    // Greater than or equal.
    GREATER_THAN_OR_EQUAL = 5;

    // Don't care about
    DONT_CARE = 6;

    // RegEx Pattern
    REG_EX = 7;
}

enum Frequency {
    // Every time generate a fault
    ALWAYS = 0;

    // Generate fault alternate attempts
    ALTERNATE = 1;

    // Fault on uniform random basis
    UNI_RANDOM = 2;
}

message ParamValue {
    // The kind of value.
    oneof kind {
        bool  null_value = 1;

        int32 int_value = 2;

        int64 long_value = 3;

        // Represents a double value.
        double double_value = 4;

        // Represents a string value.
        string string_value = 6;

        // Represents a boolean value.
        bool bool_value = 7;

        bytes binary_value = 10;

        //google.protobuf.Any struct_encoded = 22;

        //This is a wrapper object that contains a single attribute with reserved name `list`
        //google.protobuf.Any list_encoded = 23;
    }
}

message FlipCondition {
    string name = 1;
    Operator oper = 2;
    ParamValue value = 3;
}

message FlipAction {
    message ActionReturns {
        ParamValue retval = 1;
    }

    message ActionDelays {
        uint64 delay_in_usec = 1;
    }

    message ActionDelayedReturns {
        uint64 delay_in_usec = 1;
        ParamValue retval = 2;
    }

    oneof action {
        bool no_action = 1;
        ActionReturns returns = 2;
        ActionDelays delays = 3;
        ActionDelayedReturns delay_returns = 4;
    }
}

message FlipFrequency {
    uint32 count = 1;          // How many faults to generate, Default no limit

    oneof frequency {
        uint32 percent  = 2;  // Percentage of requests that matches the condition to generate fault
        uint32 every_nth = 3; // Generate fault for every nth request
    }
}

message FlipSpec {
    string flip_name = 1;
    repeated FlipCondition conditions = 2;
    FlipAction flip_action = 3;
    FlipFrequency flip_frequency = 4;
}

message FlipResponse {
    bool success = 1;

    map<string, string> metadata = 200;
}
